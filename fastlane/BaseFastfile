# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

fastlane_version "1.39.0"

default_platform :ios


platform :ios do
  before_all do
    # make builds & prov profile dirs
    sh("./scripts/mkdirs.sh")
    ensure_git_status_clean()
  end

  desc "Builds a TestFlight build. Takes the following arguments: \"
  :channel          the release channel for this build. Options include nightly, beta, production \
  :version          the version number for this build. Defaults to current version number \n \
  :username         the Apple ID to use to log into the developer portal \n \
  :adjustenv        the Adjust environment to use \n \
  :adjustkey        the Adjust API key for the given environment \n"

  lane :testflight do |options|
    # Setup channel-specific settings
    if options[:channel] == "nightly"
      options[:config] = "FirefoxNightly"
      options[:scheme] = "FirefoxNightly"
      options[:app_identifier] = "org.mozilla.ios.FirefoxNightly"
    elsif options[:channel] == "beta"
      options[:config] = "FirefoxBeta"
      options[:scheme] = "FirefoxBeta"
      options[:app_identifier] = "org.mozilla.ios.FirefoxBeta"
    elsif options[:channel] == "production"
      options[:config] = "Firefox"
      options[:scheme] = "Firefox"
      options[:app_identifier] = "org.mozilla.ios.Firefox"
    end

    # Step 1: Update the version and configuration information
    latest_build_number = latest_testflight_build_number(
      version: options[:version],
      app_identifier: options[:app_identifier],
      username: options[:username],
      initial_build_number: 1
    )

    new_build_number = latest_build_number + 1
    increment_build_number(
      build_number: new_build_number,
      xcodeproj: 'Client.xcodeproj'
    )
    options[:build_name] = "#{options[:scheme]}-v#{options[:version]}b#{new_build_number}"

    configure_adjust(
        config: options[:config],
        environment: options[:adjustenv],
        app_token: options[:adjustkey]
    )

    # Step 2: Throw on some badges
    badge(
      shield: "Version%20#{options[:version]}-Build%20#{new_build_number}-orange",
      no_badge: true,
      shield_no_resize: true
    )

    # Step 3: Check out dependences and locales
    carthage(
      platform: "iOS",
      use_binaries: false
    )
    sh("../scripts/localise.sh")

    # Step 4: Build!
    gym(
      scheme: options[:scheme],
      output_directory: "./builds/",
      output_name: "#{options[:build_name]}.ipa",
      sdk: "iphoneos",
      clean: true,
      export_method: "app-store",
      include_symbols: true,
      include_bitcode: true,
      use_legacy_build_api: true
    )
  end

  private_lane :setup do |options|
    puts "Setup: #{options}\n"
    opts = options[:options]

    # set build and version numbers
    build_number = get_build_number(xcodeproj: "Client.xcodeproj")
    version_number = get_version_number(xcodeproj: "Client.xcodeproj")
    ENV["BUILD_VERSION"] = opts[:build] || build_number
    ENV["APP_VERSION"] = opts[:version] || version_number

    ENV["BUILD_FLAVOUR"] = lane_context[SharedValues::LANE_NAME].gsub!('ios ','')
    Helper.log.debug "Build flavour: #{ENV["BUILD_FLAVOUR"]}"

    ENV["ADJUST_ENVIRONMENT"] = opts[:adjust_environment]
    ENV["ADJUST_APP_TOKEN"] = opts[:adjust_app_token]

    # create a name for this build
    ENV["DATESTAMP"] = Time.now.utc.iso8601.gsub(/\W/, '')
    ENV["BRANCH_NAME"] = options[:branch] || "firefox-#{ENV["APP_VERSION"]}-#{ENV["BUILD_VERSION"]}-#{ENV["DATESTAMP"]}"
    ENV["BUILD_NAME"] = options[:build_name] || "firefox-ios-#{ENV["BUILD_FLAVOUR"]}-#{ENV["APP_VERSION"]}-#{ENV["BUILD_VERSION"]}-#{ENV["DATESTAMP"]}"
    puts "Building #{ENV["BUILD_NAME"]}.ipa from branch #{ENV["BRANCH_NAME"]}"

    ENV["SIGH_USERNAME"] = options[:username]

    # checkout a new branch for build
    checkout_git_branch(
      base_branch: opts[:base_branch],
      branch: ENV["BRANCH_NAME"]
    )

    carthage(
      platform: "iOS",
      use_binaries: false
    )

    if opts[:localise] || false
      # import locales
      only_complete = options[:localise_only_complete] || false ? "--release" : ""
      sh("../scripts/localise.sh #{only_complete}")
    end

    version_bumped = false

    if ENV["BUILD_VERSION"] != build_number
      increment_build_number(
        build_number: ENV["BUILD_VERSION"],
        xcodeproj: 'Client.xcodeproj',
      )
      version_bumped = true
    end

    if ENV["APP_VERSION"] != version_number
      increment_version_number(
        version_number: ENV["APP_VERSION"],
        xcodeproj: 'Client.xcodeproj',
      )
      version_bumped = true
    end

    # configure Adjust parameters if environment and token exist
    if ENV["ADJUST_ENVIRONMENT"] and ENV["ADJUST_APP_TOKEN"]
      configure_adjust(
          target: "Firefox",
          environment: ENV["ADJUST_ENVIRONMENT"],
          app_token: ENV["ADJUST_APP_TOKEN"]
      )
      git_add(path: "Client/Configuration/Firefox.xcconfig")
    else
      Helper.log.info " -- !! Skipping Adjust configuration since not all Adjust parameters are available."
    end

    if version_bumped == true
      commit_version_bump(
        message: 'Version Bump',
        xcodeproj: 'Client.xcodeproj',
      )
    end
  end

  private_lane :enterprise_build do |options|
    options = options[:options] || options

    sh("sigh download_all -u #{options[:username]}")

    gym(scheme: "FennecAurora",
      output_directory: "./builds/",
      output_name: "#{ENV["BUILD_NAME"]}.ipa",
      sdk: "iphoneos",
      clean: true,
      export_method: "enterprise",
      include_symbols: true,
      include_bitcode: false)

    if options[:upload]
      upload(
        release_notes: options[:release_notes],
        build_location: options[:build_location],
        build_name: ENV["BUILD_NAME"],
        host: options[:upload_host],
        upload_location: options[:upload_location]
      )
    end
    reset_git_repo()
  end

  desc "Builds an Aurora build. Takes the following arguments: \n \
  :build            the build number for this build. Defaults to current build number \n \
  :version          the version number for this build. Defaults to current version number \n \
  :branch           the branch to build (will create if doesn't already exist. A new branch with a predictable username will be \
    created if this is not provided) \n \
  :base_branch      the branch with off of which the build should be based (current branch if empty) \n \
  :build_name       the name of the resultant build. Defaults to firefox-ios-aurora-<:version>-<:build>-<timestamp> \n \
  :username         the Apple ID to use to log into the developer portal for SIGH \n \
  :localise         if true, the branch will be localised. If absent or false no localisation will occur \n \
  :upload           if true, the build will be uploaded to the enterprise server (see the upload lane for further paramters to pass \
    for uploading)"
  lane :aurora do |options|
    options = options[:options] || options
    puts "Aurora: #{options}\n"
    setup(options: options)

    # build for enterprise
    enterprise_build(options: options)
  end

  desc "Builds an l10n build. Takes the following arguments: \n \
  :build            the build number for this build. Defaults to current build number \n \
  :version          the version number for this build. Defaults to current version number \n \
  :branch           the branch to build (will create if doesn't already exist. A new branch with a predictable username will \
    be created if this is not provided) \n \
  :base_branch      the branch with off of which the build should be based (current branch if empty) \n \
  :build_name       the name of the resultant build. Defaults to firefox-ios-l10n-<:version>-<:build>-<timestamp> \n \
  :username         the Apple ID to use to log into the developer portal for SIGH \n \
  :localise         if true, the branch will be localised. If absent or false no localisation will occur \n \
  :upload           if true, the build will be uploaded to the enterprise server (see the upload lane for further paramters to pass \
    for uploading)"
  lane :l10n do |options|
    options = options[:options] || options
    puts "l10n: #{options}\n"
    setup(options: options)

    # this is duplicating the original AppDelegate hack from firefox-ios-builder
    # copy an l10n specific AppDelegate into the project
    sh("cp templates/FennecAurora-L10N.swift ../Client/Application/AuroraAppDelegate.swift || exit 1")
    git_commit(path: "./Client/Application/AuroraAppDelegate.swift",
        message: "set l10n AuroraAppDelegate")

    # build for enterprise
    enterprise_build(options: options)
  end

  desc "Builds an beta build for the Firefox channel. Takes the following arguments: \n \
  :build                the build number for this build. Defaults to current build number \n \
  :version              the version number for this build. Defaults to current version number \n \
  :branch               the branch to build (will create if doesn't already exist. A new branch with a predictable username will \
    be created if this is not provided) \n \
  :base_branch          the branch with off of which the build should be based (current branch if empty) \n \
  :build_name           the name of the resultant build. Defaults to firefox-ios-l10n-<:version>-<:build>-<timestamp> \n \
  :username             the Apple ID to use to log into the developer portal for SIGH \n \
  :localise             if true, the branch will be localised. If absent or false no localisation will occur \n \
  :changelog            the path to the changelog for the beta build \n \
  :adjust_environment   the environment to setup Adjust for \n \
  :adjust_app_token     the app token for Adjust"
  lane :beta do |options|
    options = options[:options] || options
    puts "beta: #{options}\n"
    setup(options: options,
      localise_only_complete: true)

    username = options[:username] || "ios-builds@mozilla.com"
    sh("sigh download_all -u #{username} --output_path '../provisioning-profiles/'")

    scheme = options[:scheme] || "FirefoxBeta"
    gym(scheme: scheme,
      output_directory: "./builds/",
      output_name: "#{ENV["BUILD_NAME"]}.ipa",
      sdk: "iphoneos",
      clean: true,
      export_method: "app-store",
      include_symbols: true,
      include_bitcode: false,
      use_legacy_build_api: true)

    changelog = ""
    if options[:changelog] == true
      File.open(options[:changelog], "r") do |f|
        f.each_line do |line|
          changelog += line
        end
      end
    end

    pilot(ipa: "./builds/#{ENV["BUILD_NAME"]}.ipa",
      skip_submission: true,
      changelog: changelog)

    reset_git_repo()
  end

  desc "Builds an beta build for the Fennec channel. Takes the following arguments: \n \
  :build            the build number for this build. Defaults to current build number \n \
  :version          the version number for this build. Defaults to current version number \n \
  :branch           the branch to build (will create if doesn't already exist. A new branch with a predictable username will \
    be created if this is not provided) \n \
  :base_branch      the branch with off of which the build should be based (current branch if empty) \n \
  :build_name       the name of the resultant build. Defaults to firefox-ios-l10n-<:version>-<:build>-<timestamp> \n \
  :username         the Apple ID to use to log into the developer portal for SIGH \n \
  :localise         if true, the branch will be localised. If absent or false no localisation will occur \n \
  :changelog        the path to the changelog for the beta build"
  lane :fennec do |options|
    options = options[:options] || options
    options[:scheme] = "FennecAurora"
    puts "fennec: #{options}\n"
    beta(options: options)
  end

  desc "Uploads an ipa. Takes the following arguments: \n \
  :build            the build number for this build \n \
  :version          the version number for this build \n \
  :release_notes    the location of the release notes for this build. Defaults to `../release_notes.txt` \n \
  :plist            the location of the plist template. \n \
  :html             the location of the html template \n \
  :build_location   the location of the build to upload. Defaults to `builds` \n \
  :build_name       the name of the build to upload \n \
  :upload_host      the name of the host to upload to. Defaults to people.mozilla.org \n \
  :upload.location  the location on the :host to upload the build artifacts to. Defaults to /home/iosbuilds"
  lane :upload do |options|

    if not ENV["BUILD_NUMBER"]
      build_number = get_build_number(xcodeproj: "Client.xcodeproj")
      Helper.log.debug "Setting build number to #{build_number}"
      ENV["BUILD_VERSION"] = options[:build] || build_number
    end

    if not ENV["APP_VERSION"]
      version_number = get_version_number(xcodeproj: "Client.xcodeproj")
      Helper.log.debug "Setting version number to #{version_number}"
      ENV["APP_VERSION"] = options[:version] || version_number
    end

    if not ENV["BUILD_FLAVOUR"]
      ENV["BUILD_FLAVOUR"] = lane_context[SharedValues::LANE_NAME].gsub!('ios ','')
      Helper.log.debug "Setting build flavour to #{ENV["BUILD_FLAVOUR"]}"
    end

    if not ENV["DATESTAMP"]
      # create a name for this build
      ENV["DATESTAMP"] = Time.now.utc.iso8601.gsub(/\W/, '')
      Helper.log.debug "Setting timestamp to #{ENV["DATESTAMP"]}"
    end

    upload_enterprise_build(
      plist: options[:plist] || "fastlane/templates/FennecAurora-L10N.plist.tmpl",
      html: options[:html] || "fastlane/templates/FennecAurora-L10N.html.tmpl",
      release_notes: options[:release_notes] || "../release_notes.txt",
      build_location: options[:build_location] || "builds",
      build_name: options[:build_name],
      host: options[:upload_host] || "people.mozilla.org",
      upload_location: options[:upload_location] || "/home/iosbuilds"
    )
  end

  desc "Takes marketing snapshots using current branch"
  lane :marketing do
    snapshot(reinstall_app: true)
    frameit(white: true)
  end

  desc "Takes localization snapshots \
  :devices - a comma separated list of devices to take snapshots on. Defaults to [iPhone 4s, iPhone 5s, iPhone 6s, iPhone 6s Plus, iPad 2, iPad Pro] \
  :languages - a comma separated list of languages to take snapshots of. Defaults to list of languages in ./firefox-ios-l10n \
  :output_directory - the directory to output the snapshots to"
  lane :snapshotL10n do |options|
    if options[:devices]
      devices = options[:devices].split(",")
    else
      devices = ["iPhone 4s", "iPhone 5s", "iPhone 6s", "iPhone 6s Plus", "iPad 2", "iPad Pro"]
    end

    if options[:languages]
      languages = options[:languages].split(",")
    else
      # get the languages from the repo
      language_options = Dir.entries("../firefox-ios-l10n")
      languages = []
      for language in language_options
        if language != "templates" && language != "README.md" && language != "." && language != ".."
          languages.push(language)
        end
      end
    end

    output_dir = options[:output_directory] || "./screenshots"
    Dir.mkdir(output_dir) unless File.directory?(output_dir)

    output_links = ""
    # loop through languages
    for language in languages
      # create a new directory (if it doesn't exist) for the language
      language_dir = "#{output_dir}/#{language}"
      Dir.mkdir(language_dir) unless File.directory?(language_dir)
      if not options[:output_directory]
        language_dir = "./fastlane/screenshots/#{language}"
      end
      # pass that directory as the output directory into snapshot
      snapshot(
        scheme: "L10nSnapshotTests",
        devices: devices,
        languages: [language],
        output_directory: language_dir,
        stop_after_first_error: true,
        reinstall_app: true,
        skip_open_summary: true
      )
      # add dir name to array
      output_file = "#{language}/screenshots.html"
      output_links << "<li><a href='#{output_file}'>#{language}</a></li>\n"
      Helper.log.debug "Creating snapshots for #{language} in #{language_dir}/screenshots.html"
    end
    Helper.log.debug "all screenshots: #{output_links}"
    # create (from a template) a new HTML file in options[:output_directory] || "./fastlane/screenshots" to index all language files
    index_html = ""
    File.open("./templates/SnapshotIndex.html.tmpl", "r") do |f|
      f.each_line do |line|
        index_html += line
      end
    end
    index_html.gsub! '#{locale_links}', output_links
    File.open("#{output_dir}/index.html", 'w') {|f| f.write(index_html) }
    Helper.log.info "Snapshot Index can be found at #{output_dir}/index.html"
    sh("open #{output_dir}/index.html")
  end

  after_all do |lane|
  end

  error do |lane, exception|
  end
end
